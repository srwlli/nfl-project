{
  "plan_name": "Performance Floors V2 - Academic Enhancements",
  "description": "Comprehensive improvements to calculate-performance-floors.js based on floor-improvements.md analysis. Focuses on statistical rigor, opponent adjustments, and environmental factors.",
  "current_baseline": {
    "script": "COPY-FLOOR/calculate-performance-floors.js",
    "lines_of_code": 783,
    "execution_time": "~800ms per game",
    "completed_phases": [
      "Phase 1: ML Integration (learned_feature_weights)",
      "Phase 2: Injury Probability (discount factors)"
    ],
    "blocked_phase": "Phase 3: Backtesting (no backend data)"
  },
  "improvement_areas": {
    "data_model_accuracy": "HIGH - Use EPA, success_rate, QBR fields",
    "formula_accuracy": "CRITICAL - Implement opponent_defense (O) and game_environment (G) modifiers",
    "confidence_variance": "HIGH - Add Bayesian shrinkage, weighted variance",
    "sample_selection": "MEDIUM - Adaptive rolling windows by position",
    "database_efficiency": "HIGH - Batch queries, parallelize, filter status=final",
    "statistical_refinements": "MEDIUM - Weighted recency, percentile floors, trend detection",
    "code_quality": "LOW - Modularity, unit tests (future phase)"
  },
  "phases": [
    {
      "phase": 1,
      "name": "Foundation Fixes & Schema Validation",
      "priority": "CRITICAL",
      "estimated_time": "2-3 hours",
      "rationale": "Fix broken features mentioned in docstring (opponent_defense, game_environment) and ensure schema accuracy",
      "tasks": [
        {
          "id": "1.1",
          "description": "Implement Opponent Defensive Efficiency Factor (O)",
          "files": [
            "COPY-FLOOR/calculate-performance-floors.js:getModifierValue()",
            "COPY-FLOOR/performance-floors-config.json"
          ],
          "details": [
            "Query opponent's season defensive stats (points_against, yards_against)",
            "Calculate defensive efficiency: (opponent_avg - league_avg) / league_stddev",
            "Apply range: 0.7 (elite defense) to 1.3 (poor defense)",
            "Add to getModifierValue() with learned weight (currently 75.6%)",
            "Update config with opponent_defense_range: [0.7, 1.3]"
          ],
          "success_criteria": [
            "Opponent factor correctly adjusts projections",
            "Elite defenses (BAL, SF) reduce opponent floors by ~20-30%",
            "Poor defenses (ARI, CAR) increase opponent floors by ~20-30%",
            "Learned weight applied correctly from performance-floors-config.json"
          ],
          "estimated_time": "60 minutes",
          "complexity": "Medium"
        },
        {
          "id": "1.2",
          "description": "Implement Game Environment Modifier (G)",
          "files": [
            "COPY-FLOOR/calculate-performance-floors.js:getModifierValue()",
            "COPY-FLOOR/performance-floors-config.json"
          ],
          "details": [
            "Query stadiums table for venue (stadium_id from games table)",
            "Extract surface_type (turf/grass) and roof_type (dome/retractable/open)",
            "Query game_weather table for conditions (temp, wind, precipitation)",
            "Apply modifiers:",
            "  - Turf: +3% to passing/receiving",
            "  - Dome: +2% to all stats (no weather)",
            "  - High wind (>15 mph): -5% to passing",
            "  - Precipitation: -8% to passing, -5% to rushing",
            "  - Extreme cold (<20°F): -6% to all stats",
            "Add environment_modifiers config section"
          ],
          "success_criteria": [
            "Dome games show +2% boost to all stats",
            "Wind >15mph reduces passing floors by ~5%",
            "Rain games reduce passing floors by ~8%",
            "Turf games show +3% passing boost",
            "Config allows easy adjustment of modifier values"
          ],
          "estimated_time": "90 minutes",
          "complexity": "Medium-High"
        },
        {
          "id": "1.3",
          "description": "Add Completed Games Filter",
          "files": [
            "COPY-FLOOR/calculate-performance-floors.js:getRecentGames()"
          ],
          "details": [
            "Add .eq('status', 'final') to all game queries",
            "Prevents in-progress/postponed games from skewing stats",
            "Add status validation in data quality checks"
          ],
          "success_criteria": [
            "Only games with status='final' included in stats",
            "In-progress games excluded from projections",
            "Validation report shows status filter applied"
          ],
          "estimated_time": "15 minutes",
          "complexity": "Low"
        },
        {
          "id": "1.4",
          "description": "Optimize Database Queries (Batch & Parallel)",
          "files": [
            "COPY-FLOOR/calculate-performance-floors.js:getAllPlayerStatsForWeek()",
            "COPY-FLOOR/calculate-performance-floors.js:getRecentGames()"
          ],
          "details": [
            "Batch fetch all players in week (1 query vs N queries)",
            "Parallelize independent queries with Promise.all:",
            "  - Player stats + Recent games + Opponent stats + Weather/venue",
            "Add .select('*') to avoid over-fetching",
            "Reduce execution time from 800ms to ~300ms per game"
          ],
          "success_criteria": [
            "Execution time reduced by >60% (800ms → 300ms)",
            "Database query count reduced by >50%",
            "All data still accurate post-optimization"
          ],
          "estimated_time": "45 minutes",
          "complexity": "Medium"
        }
      ],
      "deliverables": [
        "Opponent defense factor fully integrated",
        "Game environment modifiers functional",
        "Status filter applied to all queries",
        "Query optimization reduces execution time by 60%"
      ]
    },
    {
      "phase": 2,
      "name": "Statistical Rigor & Advanced Metrics",
      "priority": "HIGH",
      "estimated_time": "3-4 hours",
      "rationale": "Improve statistical foundations with Bayesian methods, percentile floors, and advanced metrics",
      "tasks": [
        {
          "id": "2.1",
          "description": "Implement Bayesian Shrinkage for Small Samples",
          "files": [
            "COPY-FLOOR/calculate-performance-floors.js:calculateBayesianEstimate()",
            "COPY-FLOOR/performance-floors-config.json"
          ],
          "details": [
            "Create calculateBayesianEstimate(playerStats, positionAvg) function",
            "Formula: weighted_avg = (n * player_avg + k * position_avg) / (n + k)",
            "k = shrinkage factor (default: 5 games worth of data)",
            "Apply to players with <4 games (insufficient sample)",
            "Shrink towards position average (QB, RB, WR, TE baselines)",
            "Add bayesian_shrinkage config section"
          ],
          "success_criteria": [
            "Players with 1-2 games show projections closer to position avg",
            "Players with 5+ games use actual stats (minimal shrinkage)",
            "Prevents extreme projections from small samples",
            "Configurable shrinkage factor (default k=5)"
          ],
          "estimated_time": "75 minutes",
          "complexity": "Medium-High"
        },
        {
          "id": "2.2",
          "description": "Add Weighted Recency (Exponential Decay)",
          "files": [
            "COPY-FLOOR/calculate-performance-floors.js:calculateWeightedAverage()",
            "COPY-FLOOR/performance-floors-config.json"
          ],
          "details": [
            "Replace simple average with exponentially weighted average",
            "Recent games weighted higher: w_i = e^(-λ * i) where i=weeks ago",
            "Default λ=0.2 (recent game 1.0x, 3 weeks ago 0.55x, 5 weeks ago 0.37x)",
            "Apply to all rolling window calculations",
            "Add weighted_recency config section"
          ],
          "success_criteria": [
            "Recent performances have 2-3x more influence than old games",
            "Captures player trends (improving/declining)",
            "Configurable decay rate (default λ=0.2)",
            "Still uses rolling window length (QB: 5, RB: 3, etc.)"
          ],
          "estimated_time": "60 minutes",
          "complexity": "Medium"
        },
        {
          "id": "2.3",
          "description": "Replace Linear Floors with Percentile-Based Floors",
          "files": [
            "COPY-FLOOR/calculate-performance-floors.js:calculateBootstrapIntervals()",
            "COPY-FLOOR/performance-floors-config.json"
          ],
          "details": [
            "Current method: Floor = Expected - (StdDev × volatility)",
            "New method: Floor = 15th percentile of bootstrap distribution",
            "Keeps existing 500-sample bootstrap resampling",
            "Change floor calculation to percentile instead of stddev",
            "More realistic for skewed distributions (rushing yards, TDs)",
            "Add percentile_floor: 0.15 to config"
          ],
          "success_criteria": [
            "Floors match 15th percentile of actual outcomes",
            "More realistic than linear σ-based floors",
            "Example: Sam Darnold floor 150 yds (actual) vs ~188 yds (linear)",
            "Configurable percentile (default 15th)"
          ],
          "estimated_time": "45 minutes",
          "complexity": "Low-Medium"
        },
        {
          "id": "2.4",
          "description": "Integrate Advanced Metrics (EPA, Success Rate, QBR)",
          "files": [
            "COPY-FLOOR/calculate-performance-floors.js:getAdvancedMetrics()",
            "COPY-FLOOR/calculate-performance-floors.js:calculateFloor()"
          ],
          "details": [
            "Query play_by_play table for EPA, success_rate per player per game",
            "Query player_game_stats for qbr, passing_rating (QBs only)",
            "Create composite efficiency score: 0.4*EPA + 0.3*SuccessRate + 0.3*QBR",
            "Use efficiency score as additional modifier (range 0.8-1.2)",
            "High efficiency = higher floor, low efficiency = lower floor",
            "Note: play_by_play currently empty, will populate when data available"
          ],
          "success_criteria": [
            "Advanced metrics correctly queried from play_by_play",
            "Efficiency score calculated for all players",
            "High-efficiency players (Josh Allen, Patrick Mahomes) get +10-20% boost",
            "Low-efficiency players get -10-20% penalty",
            "Gracefully handles missing data (play_by_play empty)"
          ],
          "estimated_time": "90 minutes",
          "complexity": "Medium-High"
        }
      ],
      "deliverables": [
        "Bayesian shrinkage for small samples",
        "Exponentially weighted recency",
        "Percentile-based floors (15th percentile)",
        "Advanced metrics integration (EPA, success rate, QBR)"
      ]
    },
    {
      "phase": 3,
      "name": "Opportunity-Based Projections & Refinements",
      "priority": "MEDIUM",
      "estimated_time": "2-3 hours",
      "rationale": "Improve projection model by separating opportunities from efficiency",
      "tasks": [
        {
          "id": "3.1",
          "description": "Implement Two-Step Opportunity Model",
          "files": [
            "COPY-FLOOR/calculate-performance-floors.js:projectOpportunityBasedStats()",
            "COPY-FLOOR/performance-floors-config.json"
          ],
          "details": [
            "Step 1: Project opportunities (pass_attempts, rush_attempts, targets)",
            "Step 2: Project efficiency (yards_per_attempt, yards_per_carry, yards_per_target)",
            "Final projection = opportunities × efficiency",
            "Example: QB passing yards = projected_attempts × yards_per_attempt",
            "More accurate than projecting yards directly (captures volume changes)",
            "Use fields: pass_attempts, rush_attempts, targets, receiving_targets"
          ],
          "success_criteria": [
            "Opportunities projected separately from efficiency",
            "Handles volume changes (RB gets more touches, WR sees more targets)",
            "More accurate than direct yard projections",
            "Config allows opportunity vs efficiency weighting"
          ],
          "estimated_time": "90 minutes",
          "complexity": "Medium-High"
        },
        {
          "id": "3.2",
          "description": "Add Adaptive Rolling Windows by Position",
          "files": [
            "COPY-FLOOR/calculate-performance-floors.js:getRecentGames()",
            "COPY-FLOOR/performance-floors-config.json"
          ],
          "details": [
            "Current: Fixed window (4-5 games for all positions)",
            "New: Position-specific windows",
            "  - QB: 5 games (stable, high volume)",
            "  - RB: 3 games (volatile, injury-prone, role changes)",
            "  - WR: 4 games (moderate volatility)",
            "  - TE: 4 games (moderate volatility)",
            "Already in config but not enforced in code",
            "Update getRecentGames() to use position_rolling_windows from config"
          ],
          "success_criteria": [
            "QBs use 5-game window",
            "RBs use 3-game window (captures recent role changes)",
            "WR/TE use 4-game window",
            "Config-driven (easy to adjust)"
          ],
          "estimated_time": "30 minutes",
          "complexity": "Low"
        },
        {
          "id": "3.3",
          "description": "Add Trend Detection (Improving/Declining)",
          "files": [
            "COPY-FLOOR/calculate-performance-floors.js:detectTrend()",
            "COPY-FLOOR/calculate-performance-floors.js:displayProjections()"
          ],
          "details": [
            "Calculate linear regression slope on recent games",
            "Positive slope = improving (↗️), negative = declining (↘️)",
            "Apply trend modifier: +5% if improving, -5% if declining",
            "Display trend indicator in output (↗️/↘️/→)",
            "Use last 4 games for trend calculation",
            "Add trend_modifier: 0.05 to config"
          ],
          "success_criteria": [
            "Trend correctly detected (improving/declining/stable)",
            "Visual indicator in output (↗️/↘️/→)",
            "Trend modifier applied to projections (+5%/-5%)",
            "Helps identify hot/cold players"
          ],
          "estimated_time": "60 minutes",
          "complexity": "Medium"
        },
        {
          "id": "3.4",
          "description": "Add Data Validation Suite",
          "files": [
            "COPY-FLOOR/calculate-performance-floors.js:validateData()",
            "COPY-FLOOR/calculate-performance-floors.js:main()"
          ],
          "details": [
            "Pre-flight validation before processing:",
            "  - Check game exists and is scheduled (not final)",
            "  - Verify both teams exist in database",
            "  - Confirm expected player counts (40-60 per team)",
            "  - Validate stat thresholds (no negative values, realistic ranges)",
            "  - Check for missing critical fields (opponent, venue, weather)",
            "Display validation report before projections",
            "Warning (continue) vs Error (abort) levels"
          ],
          "success_criteria": [
            "Validation catches missing/invalid data before processing",
            "Clear error messages guide user to fix issues",
            "Warnings for incomplete data (continue with caveats)",
            "Errors for critical missing data (abort)"
          ],
          "estimated_time": "45 minutes",
          "complexity": "Low-Medium"
        }
      ],
      "deliverables": [
        "Two-step opportunity-based projection model",
        "Position-specific adaptive rolling windows",
        "Trend detection with visual indicators",
        "Comprehensive data validation suite"
      ]
    },
    {
      "phase": 4,
      "name": "Code Quality & Testing (Future)",
      "priority": "LOW",
      "estimated_time": "4-6 hours",
      "rationale": "Refactor for maintainability and add test coverage (defer until core features complete)",
      "tasks": [
        {
          "id": "4.1",
          "description": "Modularize into Separate Functions",
          "files": [
            "COPY-FLOOR/calculate-performance-floors.js"
          ],
          "details": [
            "Extract to modules:",
            "  - data-fetchers.js (queries)",
            "  - statistical-models.js (Bayesian, bootstrap, trends)",
            "  - modifiers.js (opponent, environment, injury)",
            "  - projections.js (main calculation logic)",
            "  - display.js (output formatting)",
            "Improve testability and maintainability",
            "Reduce main file from 780 lines to ~200 lines"
          ],
          "success_criteria": [
            "Code split into 5 focused modules",
            "Main file reduced to <250 lines",
            "All functions unit-testable",
            "No functionality changes (refactor only)"
          ],
          "estimated_time": "180 minutes",
          "complexity": "Medium"
        },
        {
          "id": "4.2",
          "description": "Add Unit Test Suite",
          "files": [
            "COPY-FLOOR/tests/performance-floors.test.js",
            "package.json"
          ],
          "details": [
            "Install Jest or Mocha",
            "Test cases:",
            "  - Bayesian shrinkage calculations",
            "  - Weighted recency formulas",
            "  - Percentile floor calculations",
            "  - Opponent/environment modifiers",
            "  - Trend detection",
            "  - Data validation",
            "Mock database queries",
            "Aim for >80% code coverage"
          ],
          "success_criteria": [
            "30+ unit tests covering core functions",
            ">80% code coverage",
            "All tests passing",
            "CI/CD integration ready"
          ],
          "estimated_time": "240 minutes",
          "complexity": "Medium-High"
        },
        {
          "id": "4.3",
          "description": "Configuration Flexibility Enhancements",
          "files": [
            "COPY-FLOOR/performance-floors-config.json",
            "COPY-FLOOR/calculate-performance-floors.js"
          ],
          "details": [
            "Make all hardcoded values configurable:",
            "  - Percentile floor threshold (default 0.15)",
            "  - Bayesian shrinkage factor (default k=5)",
            "  - Weighted recency decay (default λ=0.2)",
            "  - Trend modifier (default ±0.05)",
            "  - Opponent range (default 0.7-1.3)",
            "  - Environment modifiers (default per condition)",
            "Add config validation on startup",
            "Allow per-position overrides"
          ],
          "success_criteria": [
            "All magic numbers moved to config",
            "Config validation prevents invalid values",
            "Per-position overrides supported",
            "Documentation updated with config options"
          ],
          "estimated_time": "60 minutes",
          "complexity": "Low-Medium"
        }
      ],
      "deliverables": [
        "Modularized codebase (5 focused modules)",
        "Unit test suite with >80% coverage",
        "Fully configurable parameters"
      ]
    }
  ],
  "implementation_order": [
    "Phase 1 (CRITICAL): Foundation fixes - opponent, environment, query optimization",
    "Phase 2 (HIGH): Statistical rigor - Bayesian, percentile floors, advanced metrics",
    "Phase 3 (MEDIUM): Opportunity model, trend detection, validation",
    "Phase 4 (LOW): Code quality, testing (defer until Phases 1-3 complete)"
  ],
  "estimated_total_time": {
    "phase_1": "2-3 hours",
    "phase_2": "3-4 hours",
    "phase_3": "2-3 hours",
    "phase_4": "4-6 hours (deferred)",
    "total_phases_1_to_3": "7-10 hours",
    "total_all_phases": "11-16 hours"
  },
  "success_metrics": {
    "accuracy": [
      "Opponent defense correctly adjusts projections (±20-30%)",
      "Environment modifiers applied (dome +2%, wind -5%, etc.)",
      "Bayesian shrinkage reduces small-sample variance",
      "Percentile floors more realistic than linear σ-based"
    ],
    "performance": [
      "Execution time reduced from 800ms to ~300ms per game (60% improvement)",
      "Database queries reduced by >50% via batching",
      "Parallel queries reduce wait time"
    ],
    "robustness": [
      "Data validation catches errors before processing",
      "Gracefully handles missing data (play_by_play empty)",
      "Status filter prevents in-progress games from skewing stats"
    ],
    "usability": [
      "Trend indicators show player momentum (↗️/↘️/→)",
      "Config-driven (easy to adjust parameters)",
      "Clear validation reports guide user"
    ]
  },
  "dependencies": {
    "database_tables": [
      "player_game_stats (receptions, qbr, passing_rating)",
      "games (status, stadium_id)",
      "stadiums (surface_type, roof_type)",
      "game_weather (temp, wind_speed, precipitation)",
      "play_by_play (epa, success_rate) - currently empty",
      "player_injury_status (status) - for Phase 2 injury integration"
    ],
    "config_additions": [
      "opponent_defense_range: [0.7, 1.3]",
      "environment_modifiers: { turf: 1.03, dome: 1.02, wind: 0.95, rain: 0.92, cold: 0.94 }",
      "bayesian_shrinkage: { k: 5 }",
      "weighted_recency: { lambda: 0.2 }",
      "percentile_floor: 0.15",
      "trend_modifier: 0.05"
    ]
  },
  "notes": [
    "Phase 1 focuses on fixing broken/incomplete features (opponent, environment) mentioned in original docstring",
    "Phase 2 adds statistical rigor with Bayesian methods and percentile floors",
    "Phase 3 implements opportunity-based projections and trend detection",
    "Phase 4 (code quality/testing) can be deferred until core features validated",
    "Advanced metrics (EPA, success rate) will gracefully handle missing play_by_play data",
    "All improvements maintain backward compatibility with existing config structure",
    "Execution time improvements (800ms → 300ms) are critical for scalability (272 games/season)"
  ],
  "risk_mitigation": [
    "Batch queries tested on smaller subsets first",
    "Config validation prevents invalid parameter values",
    "Data validation catches missing/invalid data early",
    "Graceful degradation when play_by_play data unavailable",
    "All changes reversible via config (can disable features)"
  ]
}
